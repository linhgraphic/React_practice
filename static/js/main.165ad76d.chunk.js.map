{"version":3,"sources":["assets/images/linhgraphics.jpg","assets/documents/CV-Linh Nguyen.pdf","components/header/index.jsx","App.jsx","serviceWorker.js","pages/Home.jsx","pages/About.jsx","fixtures/index.js","components/contactCard.jsx","pages/ContactList.jsx","constants/index.js","components/projectCard/index.jsx","pages/projects/index.jsx","index.js"],"names":["module","exports","__webpack_require__","p","Header","props","react_default","a","createElement","className","react_router_dom","exact","to","App","components_header","this","children","Component","Boolean","window","location","hostname","match","Home","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","style","width","src","linhgraphics","alt","href","target","rel","About","cv","download","contacts","name","email","tel","ContactCard","contact","ContactList","map","contactCard","projects","url","ProjectCard","_ref","project","Projects","Fragment","components_projectCard","ReactDOM","render","src_App_0","react_router","path","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,6DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,sUCyBzBC,EArBA,SAAAC,GAAK,OAClBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAASC,OAAK,EAACC,GAAG,KAAlB,SAIFN,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAASE,GAAG,UAAZ,UAEFN,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAASE,GAAG,iBAAZ,aAEFN,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAASE,GAAG,aAAZ,gBCJOC,mLATX,OACEP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACM,EAAD,MACCC,KAAKV,MAAMW,iBALFC,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,gGCaSC,cA3Bb,SAAAA,EAAYlB,GAAO,IAAAmB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAV,KAAAQ,IACjBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAV,KAAAU,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAd,KAAMV,KACDyB,MAAQ,GAFIN,wEAMjB,OACElB,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,OACEuB,MAAO,CAAEC,MAAO,SAChBC,IAAKC,IACLC,IAAI,yBAGN7B,EAAAC,EAAAC,cAAA,KACEC,UAAU,WACV2B,KAAK,0BACLC,OAAO,SACPC,IAAI,uBAJN,yBAfWrB,8BCeJsB,mLAZX,OACEjC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAACE,EAAA,EAAD,CAAME,GAAI4B,IAAIH,OAAO,SAASI,UAAQ,GAAtC,uBAGC1B,KAAKV,MAAMW,iBARAC,aCKLyB,EATE,CACf,CAAEC,KAAM,OAAQC,MAAO,wBAAyBC,IAAK,eACrD,CAAEF,KAAM,IAAKC,MAAO,GAAIC,IAAK,IAC7B,CAAEF,KAAM,KAAMC,MAAO,GAAIC,IAAK,IAC9B,CAAEF,KAAM,KAAMC,MAAO,GAAIC,IAAK,IAC9B,CAAEF,KAAM,KAAMC,MAAO,GAAIC,IAAK,IAC9B,CAAEF,KAAM,IAAKC,MAAO,GAAIC,IAAK,KCGhBC,EARK,SAAAzC,GAAK,OACvBC,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,mBAAWH,EAAM0C,QAAQJ,MACzBrC,EAAAC,EAAAC,cAAA,oBAAYH,EAAM0C,QAAQH,OAC1BtC,EAAAC,EAAAC,cAAA,kBAAUH,EAAM0C,QAAQF,OCObG,EARK,kBAClB1C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACZiC,EAASO,IAAI,SAAAF,GAAO,OACnBzC,EAAAC,EAAAC,cAAC0C,EAAD,CAAaH,QAASA,QCPfI,SAAW,CACtB,CAAEC,IAAK,4CAA6CT,KAAM,eAC1D,CACES,IAAK,8CACLT,KAAM,oBAER,CAAES,IAAK,6CAA8CT,KAAM,oBCG9CU,SANK,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,QAAH,OAClBjD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACbH,EAAAC,EAAAC,cAAA,KAAG4B,KAAMmB,EAAQH,KAAMG,EAAQZ,SCepBa,mLAbX,OACElD,EAAAC,EAAAC,cAAAF,EAAAC,EAAAkD,SAAA,KACEnD,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACZ0C,EAASF,IAAI,SAAAM,GAAO,OACnBjD,EAAAC,EAAAC,cAACkD,EAAD,CAAaH,QAASA,eAPXtC,aCOvB0C,IAASC,OACPtD,EAAAC,EAAAC,cAACE,EAAA,EAAD,KACEJ,EAAAC,EAAAC,cAACqD,EAAD,KACEvD,EAAAC,EAAAC,cAACsD,EAAA,EAAD,KACExD,EAAAC,EAAAC,cAACsD,EAAA,EAAD,CAAOnD,OAAK,EAACoD,KAAK,IAAIC,UAAWzC,IACjCjB,EAAAC,EAAAC,cAACsD,EAAA,EAAD,CAAOnD,OAAK,EAACoD,KAAK,YAAYC,UAAWR,IACzClD,EAAAC,EAAAC,cAACsD,EAAA,EAAD,CAAOnD,OAAK,EAACoD,KAAK,SAASC,UAAWzB,IACtCjC,EAAAC,EAAAC,cAACsD,EAAA,EAAD,CAAOnD,OAAK,EAACoD,KAAK,gBAAgBC,UAAWhB,OAInDiB,SAASC,eAAe,ST0GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.165ad76d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/linhgraphics.96778282.jpg\";","module.exports = __webpack_public_path__ + \"static/media/CV-Linh Nguyen.6562304a.pdf\";","import React from \"react\";\r\nimport \"./header.css\";\r\nimport { NavLink } from \"react-router-dom\";\r\n\r\nconst Header = props => (\r\n  <nav className=\"demo\">\r\n    <ul>\r\n      <li>\r\n        <NavLink exact to=\"/\">\r\n          Home\r\n        </NavLink>\r\n      </li>\r\n      <li>\r\n        <NavLink to=\"/about\">About</NavLink>\r\n      </li>\r\n      <li>\r\n        <NavLink to=\"/contact-list\">Contacts</NavLink>\r\n      </li>\r\n      <li>\r\n        <NavLink to=\"/projects\">Projects</NavLink>\r\n      </li>\r\n    </ul>\r\n  </nav>\r\n);\r\n\r\nexport default Header;\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport Header from \"./components/header\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <Header />\r\n        {this.props.children}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from \"react\";\nimport linhgraphics from \"../assets/images/linhgraphics.jpg\";\n\nclass Home extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <header className=\"App-header\">\n        <img\n          style={{ width: \"500px\" }}\n          src={linhgraphics}\n          alt=\"Linhgraphics profile\"\n        />\n\n        <a\n          className=\"App-link\"\n          href=\"http://linhgraphics.com\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Web developer\n        </a>\n      </header>\n    );\n  }\n}\n\nexport default Home;\n","import React, { Component } from \"react\";\r\nimport cv from \"../assets/documents/CV-Linh Nguyen.pdf\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nclass About extends Component {\r\n  render() {\r\n    return (\r\n      <div className=\"About\">\r\n        <div>My name is Linh</div>\r\n        <Link to={cv} target=\"_blank\" download>\r\n          Download my CV here\r\n        </Link>\r\n        {this.props.children}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default About;\r\n","const contacts = [\r\n  { name: \"Linh\", email: \"linhgraphic@gmail.com\", tel: \"07480909333\" },\r\n  { name: \"A\", email: \"\", tel: \"\" },\r\n  { name: \"B2\", email: \"\", tel: \"\" },\r\n  { name: \"B5\", email: \"\", tel: \"\" },\r\n  { name: \"B8\", email: \"\", tel: \"\" },\r\n  { name: \"C\", email: \"\", tel: \"\" }\r\n];\r\n\r\nexport default contacts;\r\n","import React from \"react\";\r\nconst ContactCard = props => (\r\n  <ol>\r\n    <li>Name: {props.contact.name}</li>\r\n    <li>Email: {props.contact.email}</li>\r\n    <li>Tel: {props.contact.tel}</li>\r\n  </ol>\r\n);\r\n\r\nexport default ContactCard;\r\n","import React from \"react\";\r\nimport contacts from \"../fixtures\";\r\nimport ContactCard from \"../components/contactCard\";\r\n\r\nconst ContactList = () => (\r\n  <div className=\"About\">\r\n    {contacts.map(contact => (\r\n      <ContactCard contact={contact} />\r\n    ))}\r\n  </div>\r\n);\r\n\r\nexport default ContactList;\r\n","export const projects = [\r\n  { url: \"https://linhgraphic.github.io/weatherApp/\", name: \"Weather App\" },\r\n  {\r\n    url: \"https://linhgraphic.github.io/game-of-life/\",\r\n    name: \"Game Of Life App\"\r\n  },\r\n  { url: \"http://linhgraphic.github.io/my-calculator\", name: \"Calculator App\" }\r\n];\r\n","import React from \"react\";\r\nimport \"./projectCard.css\";\r\n\r\nconst ProjectCard = ({ project }) => (\r\n  <div className=\"project-card\">\r\n    <a href={project.url}>{project.name}</a>\r\n  </div>\r\n);\r\n\r\nexport default ProjectCard;\r\n","import React, { Component } from \"react\";\r\nimport \"./projects.css\";\r\nimport { projects } from \"../../constants\";\r\nimport ProjectCard from \"../../components/projectCard\";\r\n\r\nclass Projects extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <div>My projects</div>\r\n        <div className=\"projects-container\">\r\n          {projects.map(project => (\r\n            <ProjectCard project={project} />\r\n          ))}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Projects;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport \"bootstrap/dist/css/bootstrap.css\";\r\nimport Home from \"./pages/Home\";\r\nimport About from \"./pages/About\";\r\nimport ContactList from \"./pages/ContactList\";\r\nimport Projects from \"./pages/projects/\";\r\n\r\nReactDOM.render(\r\n  <Router>\r\n    <App>\r\n      <Switch>\r\n        <Route exact path=\"/\" component={Home} />\r\n        <Route exact path=\"/projects\" component={Projects} />\r\n        <Route exact path=\"/about\" component={About} />\r\n        <Route exact path=\"/contact-list\" component={ContactList} />\r\n      </Switch>\r\n    </App>\r\n  </Router>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}